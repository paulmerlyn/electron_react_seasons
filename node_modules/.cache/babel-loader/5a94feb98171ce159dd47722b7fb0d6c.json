{"ast":null,"code":"import _classCallCheck from \"/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/src/app.js\";\nimport React from 'react';\nimport SeasonDisplay from './SeasonDisplay';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      lat: null,\n      loadingGeoLocation: true,\n      season: null\n    };\n\n    _this.successCallback = function (position) {\n      var msg = \"Your latitude is \".concat(position.coords.latitude);\n      msg += \"\\r\\nAnd your longitude is \".concat(position.coords.longitude);\n      console.log(msg);\n\n      _this.setState({\n        lat: position.coords.latitude,\n        long: position.coords.longitude,\n        errorMessage: '',\n        loadingGeoLocation: false\n      });\n\n      console.log(_this.state);\n      var month = new Date().getMonth() + 1;\n\n      if (_this.state.lat > 0 && month >= 4 && month <= 9) {\n        _this.setState({\n          season: 'summer'\n        });\n      } else {\n        _this.setState({\n          season: 'winter'\n        });\n      }\n\n      if (_this.state.lat <= 0 && month >= 4 && month <= 9) {\n        _this.setState({\n          season: 'winter'\n        });\n      } else {\n        _this.setState({\n          hemisphere: 'summer'\n        });\n      }\n    };\n\n    _this.errorCallback = function (err) {\n      console.log(\"Sorry. We cannot detect your location using the browser-based geolocation object\");\n      console.log(err);\n\n      _this.setState({\n        errorMessage: 'Sorry, it looks like geolocation isn\\'t available for you: ' + err.message,\n        loadingGeoLocation: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      window.navigator.geolocation.getCurrentPosition(this.successCallback, this.errorCallback);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"ui header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"My App Component\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Merry Christmas, React! I really like you!\"), this.state.loadingGeoLocation ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"loading...\") : !this.state.errorMessage ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"The latitude is: \", this.state.lat, \", and the longitude is: \", this.state.long) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.state.errorMessage), React.createElement(SeasonDisplay, {\n        hemisphere: this.state.hemisphere,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('The App component did mount');\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log('The App component did update');\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/pmerlyn/react_playground/stephen_grider_udemy/seasons/src/app.js"],"names":["React","SeasonDisplay","App","props","state","lat","loadingGeoLocation","season","successCallback","position","msg","coords","latitude","longitude","console","log","setState","long","errorMessage","month","Date","getMonth","hemisphere","errorCallback","err","message","window","navigator","geolocation","getCurrentPosition","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SeasonDisplay from './SeasonDisplay';\n\n\nclass App extends React.Component {\n    state = { lat: null, loadingGeoLocation: true, season: null };\n\n    successCallback = (position) => {\n        let msg = `Your latitude is ${position.coords.latitude}`;\n        msg += `\\r\\nAnd your longitude is ${position.coords.longitude}`;\n        console.log(msg);\n        this.setState({lat: position.coords.latitude, long: position.coords.longitude, errorMessage: '', loadingGeoLocation: false});\n        console.log(this.state);\n        const month = new Date().getMonth() + 1;\n        if (this.state.lat > 0 && month >= 4 && month <= 9) {\n            this.setState({ season: 'summer'});\n        } else {\n            this.setState({season: 'winter'});\n        }\n\n        if (this.state.lat <= 0 && month >= 4 && month <= 9) {\n            this.setState({ season: 'winter'});\n        } else {\n            this.setState({hemisphere: 'summer'});\n        }\n    }\n\n    errorCallback = (err) => {\n        console.log(`Sorry. We cannot detect your location using the browser-based geolocation object`);\n        console.log(err);\n        this.setState({ errorMessage: 'Sorry, it looks like geolocation isn\\'t available for you: ' + err.message, loadingGeoLocation: false});\n    }\n    \n    \n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        window.navigator.geolocation.getCurrentPosition(this.successCallback, this.errorCallback);\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 className=\"ui header\">My App Component</h1>\n                <div>Merry Christmas, React! I really like you!</div>\n                {this.state.loadingGeoLocation ? (<div>loading...</div>) :\n                    (\n                        !this.state.errorMessage ? \n                        (<div>The latitude is: {this.state.lat}, and the longitude is: {this.state.long}</div>) : \n                        (<div>{this.state.errorMessage}</div>) \n                    )\n                }\n                <SeasonDisplay hemisphere={this.state.hemisphere} />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        console.log('The App component did mount');\n    }\n\n    componentDidUpdate() {\n        console.log('The App component did update');\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}